// src/App.js
import React, { useEffect, useMemo, useRef, useState } from "react";

/** ÏßàÎ¨∏ Ï†ïÏùò */
const questions = [
  { id: 1, text: "Ïπ¥Îìú ÎÇ¥Ïó≠ ÌååÏùºÏùÑ ÏóÖÎ°úÎìú Ìï¥Ï£ºÏÑ∏Ïöî. (CSV/XLSX)", type: "file" },
  { id: 2, text: "Í∏∞ÎåÄ ÏàòÏùµÎ•†Ïù¥ ÎÇÆÎçîÎùºÎèÑ ÏõêÍ∏à ÏÜêÏã§Ïù¥ ÏóÜÎäî ÏÉÅÌíàÏùÑ Ïö∞ÏÑ† Í≥†Î†§ÌïòÏãúÎÇòÏöî?", type: "OX" },
  { id: 3, text: "Í≤ΩÏ†ú/Ìà¨Ïûê Ï†ïÎ≥¥Î•º Îâ¥Ïä§¬∑Ïú†ÌäúÎ∏å¬∑Ïª§ÎÆ§ÎãàÌã∞ Îì±ÏóêÏÑú Ï†ÅÍ∑πÏ†ÅÏúºÎ°ú Ï∞æÏïÑÎ≥¥ÏãúÎÇòÏöî?", type: "OX" },
  { id: 4, text: "ÏïàÏ†ïÎ≥¥Îã§ ÏÑ±Ïû•(Îã§ÏÜå ÏúÑÌóò Í∞êÏàò) Ï™ΩÏùÑ ÏÑ†Ìò∏ÌïòÏãúÎÇòÏöî?", type: "OX" },
  { id: 5, text: "Ï†ïÎ∂Ä ÏßÄÏõê ÏÉÅÌíàÎ≥¥Îã§ Î≥∏Ïù∏ Ìà¨Ïûê ÏàòÏùµÏùÑ Îçî ÏûêÏã†ÌïòÏãúÎÇòÏöî?", type: "OX" },
  { id: 6, text: "Ï†ïÎ∂Ä/ÏùÄÌñâ Î≥¥Ï¶ùÏùò ÏïàÏ†ïÏ†ÅÏù∏ ÏÉÅÌíàÏùÑ ÏÑ†Ìò∏ÌïòÏãúÎÇòÏöî?", type: "OX" },
  { id: 7, text: "ÏÜêÏã§Ïùò Í≥†ÌÜµ(‚Äì10%)Ïù¥ Ïù¥Ïùµ(+10%)Ïùò Í∏∞ÏÅ®Î≥¥Îã§ Îçî ÌÅ¨Í≤å ÎäêÍª¥ÏßÄÎÇòÏöî?", type: "OX" },
  { id: 8, text: "ÌÉÄÏù∏ ÏÑ±Í≥µÏÇ¨Î°Ä/Ìä∏Î†åÎìúÎ≥¥Îã§ ÏûêÏã†Ïùò Î∂ÑÏÑùÏùÑ Îçî Ïã†Î¢∞ÌïòÎÇòÏöî?", type: "OX" },
  { id: 9, text: "Îß§Îã¨ ÏòàÏÇ∞ÏùÑ ÏÑ∏Ïö∞Í≥† ÏßÄÏ∂úÏùÑ ÍººÍººÌûà Ï∂îÏ†ÅÌïòÎ†§Í≥† ÎÖ∏Î†•ÌïòÏãúÎÇòÏöî?", type: "OX" },
  { id: 10, text: "Îã®Í∏∞ Îß§Îß§Î≥¥Îã§ Ïû•Í∏∞Ìà¨ÏûêÍ∞Ä Îçî ÎßûÎã§Í≥† ÏÉùÍ∞ÅÌïòÏãúÎÇòÏöî?", type: "OX" }
];

/** Ïú†Ìã∏ */
const uuid = () => Math.random().toString(36).slice(2) + Date.now().toString(36);
const STORAGE_KEY = "sasha_chat_messages_v1";
const ANSWER_KEY = "sasha_answers_v1";

export default function App() {
  const [messages, setMessages] = useState([]);
  const [answers, setAnswers] = useState({});
  const [currentStep, setCurrentStep] = useState(1);
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const bottomRef = useRef(null);

  const currentQuestion = useMemo(
    () => questions.find((q) => q.id === currentStep),
    [currentStep]
  );

  // Î°úÏª¨ Ï†ÄÏû•ÏÜå Î≥µÏõê
  useEffect(() => {
    const saved = localStorage.getItem(STORAGE_KEY);
    const savedAns = localStorage.getItem(ANSWER_KEY);
    if (saved) {
      try { setMessages(JSON.parse(saved)); } catch {}
    }
    if (savedAns) {
      try { setAnswers(JSON.parse(savedAns)); } catch {}
    }
  }, []);

  // Î°úÏª¨ Ï†ÄÏû•ÏÜå Ï†ÄÏû•
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(messages));
  }, [messages]);

  useEffect(() => {
    localStorage.setItem(ANSWER_KEY, JSON.stringify(answers));
  }, [answers]);

  // Ï≤´ ÏßÑÏûÖ Ïãú ÌôòÏòÅ + Ï≤´ ÏßàÎ¨∏
  useEffect(() => {
    if (messages.length === 0) {
      setMessages([
        { id: uuid(), role: "assistant", content: "ÏïàÎÖïÌïòÏÑ∏Ïöî! Ï†ÄÎäî **ÏÇ¨ÏÉ§** Í∏àÏúµ ÏΩîÏπòÏòàÏöî. Î™á Í∞ÄÏßÄ ÏßàÎ¨∏Îßå ÎãµÌïòÎ©¥, ÏõîÍ∏â/Ïπ¥ÎìúÎÇ¥Ïó≠ Í∏∞Î∞òÏúºÎ°ú ÎßûÏ∂§ ÌîºÎìúÎ∞±ÏùÑ ÎìúÎ¶¥Í≤åÏöî.", createdAt: Date.now() },
        { id: uuid(), role: "assistant", content: questions[0].text, createdAt: Date.now() }
      ]);
    }
  }, [messages.length]);

  // ÏûêÎèô Ïä§ÌÅ¨Î°§
  useEffect(() => {
    bottomRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages, loading]);

  /** Î©îÏãúÏßÄ Ï∂îÍ∞Ä */
  const pushMessage = (msg) => {
    setMessages((prev) => [...prev, { ...msg, id: uuid(), createdAt: Date.now() }]);
  };

  /** OX ÏùëÎãµ Ìï∏Îì§Îü¨ */
  const handleOX = (value) => {
    if (!currentQuestion) return;
    pushMessage({ role: "user", content: `${value}` });
    setAnswers((prev) => ({ ...prev, [currentQuestion.id]: value }));
    goNextStep();
  };

  /** ÌååÏùº ÏóÖÎ°úÎìú Ìï∏Îì§Îü¨ */
  const onFileChange = (e) => {
    if (!e.target.files || e.target.files.length === 0) return;
    const f = e.target.files[0];
    setFile(f);
    pushMessage({ role: "user", content: `ÌååÏùº ÏóÖÎ°úÎìú: ${f.name}`, fileName: f.name });
    goNextStep();
  };

  /** Îã§Ïùå ÏßàÎ¨∏ or Î∂ÑÏÑù Ïú†ÎèÑ */
  const goNextStep = () => {
    const next = currentStep + 1;
    setCurrentStep(next);
    const nextQ = questions.find((q) => q.id === next);
    if (nextQ) {
      pushMessage({ role: "assistant", content: nextQ.text });
    } else {
      pushMessage({ role: "assistant", content: "ÎãµÎ≥Ä Í∞êÏÇ¨Ìï©ÎãàÎã§! ÏïÑÎûò **Î∂ÑÏÑù ÏãúÏûë** Î≤ÑÌäºÏùÑ ÎàåÎü¨ ÏµúÏ¢Ö ÌîºÎìúÎ∞±ÏùÑ Î∞õÏïÑÎ≥¥ÏÑ∏Ïöî." });
    }
  };

  /** Î∂ÑÏÑù Ïã§Ìñâ */
  const runAnalysis = async () => {
    const formData = new FormData();
    formData.append("answers", JSON.stringify(answers));
    if (file) formData.append("file", file);

    setLoading(true);
    try {
      const res = await fetch("http://localhost:8000/chat", { method: "POST", body: formData });
      const raw = await res.text();
      let data = {};
      try { data = JSON.parse(raw); } catch {
        pushMessage({ role: "assistant", content: `ÏóêÎü¨(${res.status})\n${raw}` });
        return;
      }
      const text = data.final_feedback || data.output || data.result || data.message || data.error;
      pushMessage({ role: "assistant", content: text || "ÏùëÎãµÏù¥ ÏóÜÏäµÎãàÎã§." });
    } catch (e) {
      pushMessage({ role: "assistant", content: `ÏÑúÎ≤Ñ ÏöîÏ≤≠ Ïò§Î•ò: ${String(e)}` });
    } finally {
      setLoading(false);
    }
  };

  /** Ï¥àÍ∏∞Ìôî */
  const resetChat = () => {
    setMessages([]);
    setAnswers({});
    setFile(null);
    setCurrentStep(1);
    localStorage.removeItem(STORAGE_KEY);
    localStorage.removeItem(ANSWER_KEY);
  };

  /** **bold** / Ï§ÑÎ∞îÍøà Ï≤òÎ¶¨ */
  const toHtml = (src) =>
    src
      .replace(/&/g, "&amp;")
      .replace(/</g, "&lt;")
      .replace(/>/g, "&gt;")
      .replace(/\*\*(.+?)\*\*/g, "<strong>$1</strong>")
      .replace(/\n/g, "<br/>");

  return (
    <div style={styles.page}>
      <div style={styles.container}>
        <header style={styles.header}>
          <h1 style={styles.logo}>ÏÇ¨ÏÉ§ ‚Äì Í∏àÏúµ ÏΩîÏπò</h1>
          <div style={styles.headerBtns}>
            <button style={styles.resetBtn} onClick={resetChat}>ÎåÄÌôî Ï¥àÍ∏∞Ìôî</button>
          </div>
        </header>

        <div style={styles.chatWindow}>
          {messages.map((m) => (
            <div key={m.id} style={{ ...styles.bubble, ...(m.role === "assistant" ? styles.assistant : styles.user) }}>
              {m.fileName ? (
                <div><div style={styles.fileBadge}>üìé {m.fileName}</div></div>
              ) : (
                <div dangerouslySetInnerHTML={{ __html: toHtml(m.content) }} />
              )}
            </div>
          ))}
          <div ref={bottomRef} />
        </div>

        <div style={styles.controls}>
          {currentQuestion?.type === "OX" && (
            <div style={styles.actionsRow}>
              <button style={styles.actionBtn} onClick={() => handleOX("O")}>O</button>
              <button style={styles.actionBtn} onClick={() => handleOX("X")}>X</button>
            </div>
          )}

          {currentQuestion?.type === "file" && (
            <div style={styles.actionsRow}>
              <label style={styles.fileLabel}>
                ÌååÏùº ÏÑ†ÌÉù
                <input type="file" style={{ display: "none" }} onChange={onFileChange} />
              </label>
              {file && <span style={styles.fileName}>{file.name}</span>}
            </div>
          )}

          {currentStep > questions.length && (
            <div style={styles.actionsRow}>
              <button style={{ ...styles.primaryBtn, opacity: loading ? 0.7 : 1 }} onClick={runAnalysis} disabled={loading}>
                {loading ? "Î∂ÑÏÑù Ï§ë‚Ä¶" : "Î∂ÑÏÑù ÏãúÏûë"}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

const styles = {
  page: { background: "#0b1420", minHeight: "100vh", padding: "24px 0" },
  container: { maxWidth: 820, margin: "0 auto", padding: "0 20px", color: "#e7edf6", fontFamily: "Pretendard, system-ui, sans-serif" },
  header: { display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 12 },
  logo: { margin: 0, fontSize: 22, fontWeight: 800 },
  headerBtns: { display: "flex", gap: 8 },
  resetBtn: { background: "transparent", border: "1px solid rgba(255,255,255,.2)", borderRadius: 10, color: "#e7edf6", padding: "8px 12px", cursor: "pointer" },
  chatWindow: { background: "#0f1b2d", borderRadius: 14, padding: 16, height: "62vh", overflowY: "auto", boxShadow: "0 0 0 1px rgba(255,255,255,0.06) inset" },
  bubble: { maxWidth: "78%", padding: "10px 12px", borderRadius: 12, marginBottom: 10, lineHeight: 1.5, wordBreak: "break-word", fontSize: 15 },
  assistant: { background: "rgba(255,255,255,0.06)", borderTopLeftRadius: 4, alignSelf: "flex-start" },
  user: { background: "#3b82f6", color: "#fff", borderTopRightRadius: 4, marginLeft: "auto" },
  fileBadge: { fontSize: 14 },
  controls: { marginTop: 12 },
  actionsRow: { display: "flex", gap: 8, alignItems: "center", justifyContent: "flex-start", flexWrap: "wrap" },
  actionBtn: { padding: "10px 16px", borderRadius: 10, background: "#1f2b3e", color: "#e7edf6", border: "1px solid rgba(255,255,255,.15)", cursor: "pointer", fontSize: 16 },
  fileLabel: { padding: "10px 16px", borderRadius: 10, background: "#1f2b3e", border: "1px solid rgba(255,255,255,.15)", cursor: "pointer" },
  fileName: { opacity: 0.8 },
  primaryBtn: { padding: "12px 18px", borderRadius: 10, border: "none", background: "#3b82f6", color: "#fff", fontSize: 16, cursor: "pointer" }
};
